<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.trc.mapper.score.IScoreChangeMapper" >

      <insert id="insertScoreChange" parameterType="org.trc.domain.score.ScoreChange">
        insert into score_change(
            userId,
            userName,
            theOtherUserId,
            theOtherUserName,
            scoreId,
            foreignCurrency,
            score,
            scoreBalance,
            freezingScoreBalance,
            orderCode,
            shopId,
            channelCode,
            businessCode,
            flowType,
            remark,
            exchangeCurrency,
            <if test="operationTime != null ">
                operationTime,
            </if>
            expirationTime,
            createTime
        )values(
            #{userId},
            #{userName},
            #{theOtherUserId},
            #{theOtherUserName},
            #{scoreId},
            #{foreignCurrency},
            #{score},
            #{scoreBalance},
            #{freezingScoreBalance},
            #{orderCode},
            #{shopId},
            #{channelCode},
            #{businessCode},
            #{flowType},
            #{remark},
            #{exchangeCurrency},
            <if test="operationTime != null ">
                #{operationTime},
            </if>
            #{expirationTime},
            now()
        )
    </insert>
    
    <select id="queryScoreChangeForUser" parameterType="org.trc.domain.dto.ScoreChangeRecordQueryDTO"
            resultType="org.trc.domain.score.ScoreChange">
        select * from score_change
        <where>
            <if test="userId!=null">
                and userId = #{userId}
            </if>
            <if test="businessCodeList != null and businessCodeList.size() > 0">
                and businessCode in
                <foreach item="item" index="index" collection="businessCodeList" open="(" separator="," close=")">
                    #{businessCodeList[${index}]}
                </foreach>
            </if>
            <if test="operateTimeMin!=null">
                and operationTime <![CDATA[>=]]> #{operateTimeMin}
            </if>
            <if test="operateTimeMax!=null">
                and operationTime <![CDATA[<]]> #{operateTimeMax}
            </if>
            and state = 0
        </where>
        order by createTime desc
    </select>
    
    <!-- add by xab 用户积分流水明细报表 -->
    <select id="queryScoreChangeRecordsForUser" parameterType="org.trc.domain.dto.ScoreChangeRecordQueryDTO"
            resultType="org.trc.domain.dto.ScoreChangeRecordsDTO">
            select 
            sc.userId as userId,
  			sc.orderCode as orderCode,
			sc.theOtherUserId,
			s.shopName as shopName,
			sc.userName as userName,
			sc.businessCode as businessCode,
		    sc.score as score,
			sc.operationTime as operationTime,
			sc.remark as remark
           from score_change sc left JOIN shop s ON (sc.theOtherUserId = s.userId)
        <where>
            <if test="userId!=null">
                and sc.userId = #{userId}
            </if>
            <if test="businessCodeList != null and businessCodeList.size() > 0">
                and sc.businessCode in
                <foreach item="item" index="index" collection="businessCodeList" open="(" separator="," close=")">
                    #{businessCodeList[${index}]}
                </foreach>
            </if>
            <if test="businessCodeList == null or businessCodeList.size() &lt;= 0">
                and sc.businessCode in ('exchangeIn','consume','lotteryConsume','consumeCorrect')
            </if>
            <choose>
                <when test="shopId != null">
                    and (
                    sc.theOtherUserId = #{theOtherUserId}
                    )
                </when>
            </choose>
            <if test="operateTimeMin!=null">
                and sc.operationTime <![CDATA[>=]]> #{operateTimeMin}
            </if>
            <if test="operateTimeMax!=null">
                and sc.operationTime <![CDATA[<]]> #{operateTimeMax}
            </if>
            and sc.state = 0
        </where>
        order by operationTime desc
    </select>
    

    
    <select id="queryScoreChangeForShopAdmin" parameterType="org.trc.domain.dto.ScoreChangeRecordQueryDTO"
            resultType="org.trc.domain.score.ScoreChange">
        select * from score_change
        <where>
            <if test="userId!=null">
                and userId = #{userId}
            </if>
            <if test="businessCodeList != null and businessCodeList.size() > 0">
                and businessCode in
                <foreach item="item" index="index" collection="businessCodeList" open="(" separator="," close=")">
                    #{businessCodeList[${index}]}
                </foreach>
            </if>
            <if test="shopId!=null">
                and (
                shopId = #{shopId}
                <if test="exchangeCurrency!=null">
                    or (exchangeCurrency = #{exchangeCurrency})
                </if>
                )
            </if>
            <if test="operateTimeMin!=null">
                and operationTime <![CDATA[>=]]> #{operateTimeMin}
            </if>
            <if test="operateTimeMax!=null">
                and operationTime <![CDATA[<]]> #{operateTimeMax}
            </if>
            and state = 0
        </where>
        order by createTime desc
    </select>

    <select id="queryScoreChangeForPlatAdmin" parameterType="org.trc.domain.dto.ScoreChangeRecordQueryDTO"
            resultType="org.trc.domain.score.ScoreChange">
        select * from score_change
        <where>
            <if test="userId!=null">
                and userId = #{userId}
            </if>
            <if test="businessCodeList != null and businessCodeList.size() > 0">
                and businessCode in
                <foreach item="item" index="index" collection="businessCodeList" open="(" separator="," close=")">
                    #{businessCodeList[${index}]}
                </foreach>
            </if>
            <choose>
                <when test="shopId != null">
                    and (
                    shopId = #{shopId}
                    <if test="exchangeCurrency!=null">
                        or (exchangeCurrency = #{exchangeCurrency})
                    </if>
                    )
                </when>
                <otherwise>
                    and (shopId is not null or exchangeCurrency is not null)
                </otherwise>
            </choose>
            <if test="operateTimeMin!=null">
                and operationTime <![CDATA[>=]]> #{operateTimeMin}
            </if>
            <if test="operateTimeMax!=null">
                and operationTime <![CDATA[<]]> #{operateTimeMax}
            </if>
            and state = 0
        </where>
        order by createTime desc
    </select>

    <select id="queryScoreChangeForExport" parameterType="org.trc.domain.dto.ScoreChangeRecordQueryDTO"
            resultType="org.trc.domain.dto.FlowDTO">
        select operationTime as serialDate,
        orderCode as serialNum,
        exchangeCurrency,
        foreignCurrency,
        score,
        userName as phone
        from score_change
        <where>
            <if test="userId!=null">
                and userId = #{userId}
            </if>
            <if test="businessCodeList != null and businessCodeList.size() > 0">
                and businessCode in
                <foreach item="item" index="index" collection="businessCodeList" open="(" separator="," close=")">
                    #{businessCodeList[${index}]}
                </foreach>
            </if>
            <choose>
                <when test="shopId != null">
                    and (
                    shopId = #{shopId}
                    <if test="exchangeCurrency!=null">
                        or (exchangeCurrency = #{exchangeCurrency})
                    </if>
                    )
                </when>
                <otherwise>
                    and (shopId is not null or exchangeCurrency is not null)
                </otherwise>
            </choose>
            <if test="operateTimeMin!=null">
                and operationTime <![CDATA[>=]]> #{operateTimeMin}
            </if>
            <if test="operateTimeMax!=null">
                and operationTime <![CDATA[<]]> #{operateTimeMax}
            </if>
            and state = 0
        </where>
        order by createTime desc
    </select>

    <update id="correctScoreChange" parameterType="org.trc.domain.score.ScoreChange">
        update score_change
        set state = 1
        where orderCode = #{orderCode} and businessCode = #{businessCode}
    </update>

    <select id="getTotalAmount" parameterType="org.trc.domain.dto.ScoreChangeRecordQueryDTO" resultType="int">
        select
        CASE
        WHEN sum(score) is not NULL THEN
        sum(score)
        ELSE
        0
        END
        from score_change
        <where>
            <if test="userId!=null">
                and userId = #{userId}
            </if>
            <if test="businessCodeList != null and businessCodeList.size() > 0">
                and businessCode in
                <foreach item="item" index="index" collection="businessCodeList" open="(" separator="," close=")">
                    #{businessCodeList[${index}]}
                </foreach>
            </if>
            <if test="exchangeCurrency!=null">
                and exchangeCurrency = #{exchangeCurrency}
            </if>
            <if test="operateTimeMin!=null">
                and operationTime <![CDATA[>=]]> #{operateTimeMin}
            </if>
            <if test="operateTimeMax!=null">
                and operationTime <![CDATA[<]]> #{operateTimeMax}
            </if>
            and state = 0
        </where>
    </select>

    <select id="getLastScoreChange" parameterType="java.util.Map" resultType="org.trc.domain.score.ScoreChange">
        select * from score_change where scoreId = #{scoreId} and createTime <![CDATA[<]]> #{dailySettlementTime} and state = 0 order by createTime desc limit 1
    </select>
</mapper>
